# Supabase Integration Plan (Hosted Only)

## Current State Analysis

### Database Tables
1. **calendar_events**
   - Columns: id, title, description, date, type, created_at, user_id
   - RLS: Enabled with policies for users to manage their own events
   - Special policy for test user (rsb.3@me.com) with ID 'b9b36d04-59e0-49d7-83ff-46c5186a8cf4'

2. **events**
   - Columns: event_id, title, description, event_date, user_id, created_at
   - No explicit RLS policies found in migration files

3. **todo_list**
   - Columns: id, created_at, title, urgent, description, done, done_at, owner
   - RLS: Enabled with a policy for authenticated users to manage their own todos
   - Grants to anon, authenticated, and service_role roles

### Users
- Test user (rsb.3@me.com) with ID 'b9b36d04-59e0-49d7-83ff-46c5186a8cf4'
- Role: authenticated

### Next.js Integration
- Client-side Supabase client using createClientComponentClient
- Server-side Supabase client using createServerClient
- Admin client using service role key
- SassClient wrapper for common operations
- Authentication handled through useAuth hook and getCurrentUserId function
- Fallback to TEST_USER_ID for development

## Issues and Improvements

1. **Inconsistent RLS Policies**
   - calendar_events has detailed policies
   - todo_list has a single policy
   - events table may not have RLS enabled

2. **Security Concerns**
   - todo_list grants permissions to anon role
   - Fallback to TEST_USER_ID in auth.ts could bypass RLS in production

3. **Missing Admin Role**
   - No specific admin role or policies for the owner/super admin

## Action Plan

### 1. Implement User Roles and RLS Policies

1. **Create a New Migration for User Roles**
   - Create a new migration file in supabase/migrations/
   - Define admin and user roles
   - Assign rsb.3@me.com as admin

2. **Standardize RLS Policies Across Tables**
   - Enable RLS on all tables
   - Create consistent policies for user access
   - Create admin policies for full access

3. **Update Database Types**
   - Update database.types.ts to include all tables and their types

### 2. Apply Migration to Hosted Supabase

1. **Apply Migration Using Supabase Dashboard**
   - Log in to the Supabase dashboard
   - Navigate to the SQL editor
   - Run the migration SQL script

2. **Verify Migration**
   - Check that the migration was applied successfully
   - Verify that the RLS policies are working as expected

### 3. Update Next.js Application

1. **Update Auth Handling**
   - Update the auth.ts file to include role-based access control
   - Add isAdmin flag to useAuth hook
   - Add isCurrentUserAdmin function

2. **Update Components**
   - Update components to use the new role-based access control
   - Hide admin-only features from regular users

### 4. Detailed Implementation Plan

#### 4.1. Create Migration for User Roles and RLS

Create a new migration file: `supabase/migrations/20250226000000_user_roles_and_rls.sql`

```sql
-- Create user roles
CREATE TYPE auth_role AS ENUM ('admin', 'user');

-- Add role column to auth.users if not exists
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                  WHERE table_schema = 'auth' 
                  AND table_name = 'users' 
                  AND column_name = 'app_role') THEN
        ALTER TABLE auth.users ADD COLUMN app_role auth_role DEFAULT 'user';
    END IF;
END
$$;

-- Set the test user as admin
UPDATE auth.users 
SET app_role = 'admin'
WHERE id = 'b9b36d04-59e0-49d7-83ff-46c5186a8cf4';

-- Enable RLS on events table if not already enabled
ALTER TABLE events ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for events table
CREATE POLICY "Users can view their own events"
    ON events
    FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own events"
    ON events
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own events"
    ON events
    FOR UPDATE
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own events"
    ON events
    FOR DELETE
    USING (auth.uid() = user_id);

-- Create admin policies for events table
CREATE POLICY "Admins can view all events"
    ON events
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can insert events"
    ON events
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can update events"
    ON events
    FOR UPDATE
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can delete events"
    ON events
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

-- Update todo_list policies
DROP POLICY IF EXISTS "Owner can do everything" ON todo_list;

-- Revoke permissions from anon role
REVOKE ALL ON TABLE todo_list FROM anon;

-- Create user policies for todo_list
CREATE POLICY "Users can view their own todos"
    ON todo_list
    FOR SELECT
    USING (owner = auth.uid());

CREATE POLICY "Users can insert their own todos"
    ON todo_list
    FOR INSERT
    WITH CHECK (owner = auth.uid());

CREATE POLICY "Users can update their own todos"
    ON todo_list
    FOR UPDATE
    USING (owner = auth.uid())
    WITH CHECK (owner = auth.uid());

CREATE POLICY "Users can delete their own todos"
    ON todo_list
    FOR DELETE
    USING (owner = auth.uid());

-- Create admin policies for todo_list
CREATE POLICY "Admins can view all todos"
    ON todo_list
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can insert todos"
    ON todo_list
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can update todos"
    ON todo_list
    FOR UPDATE
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can delete todos"
    ON todo_list
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

-- Update calendar_events policies to include admin role
CREATE POLICY "Admins can view all calendar events"
    ON calendar_events
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can insert calendar events"
    ON calendar_events
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can update calendar events"
    ON calendar_events
    FOR UPDATE
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can delete calendar events"
    ON calendar_events
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));
```

#### 4.2. Update Database Types

Update `nextjs/src/lib/database.types.ts` to include all tables:

```typescript
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      calendar_events: {
        Row: {
          id: string
          title: string
          description: string | null
          date: string
          type: 'meeting' | 'task' | 'reminder'
          created_at: string
          user_id: string
        }
        Insert: {
          id?: string
          title: string
          description?: string | null
          date: string
          type: 'meeting' | 'task' | 'reminder'
          created_at?: string
          user_id: string
        }
        Update: {
          id?: string
          title?: string
          description?: string | null
          date?: string
          type?: 'meeting' | 'task' | 'reminder'
          created_at?: string
          user_id?: string
        }
      }
      events: {
        Row: {
          event_id: string
          title: string | null
          description: string | null
          event_date: string
          user_id: string
          created_at: string | null
        }
        Insert: {
          event_id?: string
          title?: string | null
          description?: string | null
          event_date: string
          user_id: string
          created_at?: string | null
        }
        Update: {
          event_id?: string
          title?: string | null
          description?: string | null
          event_date?: string
          user_id?: string
          created_at?: string | null
        }
      }
      todo_list: {
        Row: {
          id: number
          created_at: string
          title: string
          urgent: boolean
          description: string | null
          done: boolean
          done_at: string | null
          owner: string
        }
        Insert: {
          id?: number
          created_at?: string
          title: string
          urgent?: boolean
          description?: string | null
          done?: boolean
          done_at?: string | null
          owner: string
        }
        Update: {
          id?: number
          created_at?: string
          title?: string
          urgent?: boolean
          description?: string | null
          done?: boolean
          done_at?: string | null
          owner?: string
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      auth_role: 'admin' | 'user'
    }
  }
}
```

#### 4.3. Update Auth Handling

Update `nextjs/src/lib/auth.ts` to include role-based access control:

```typescript
"use client"

import { createClientComponentClient } from "@supabase/auth-helpers-nextjs"
import { Database } from "@/lib/database.types"
import { useEffect, useState } from "react"
import { User } from "@supabase/supabase-js"

// Create a Supabase client for client components
export const supabase = createClientComponentClient<Database>()

// Hook to get the current authenticated user
export function useAuth() {
    const [user, setUser] = useState<User | null>(null)
    const [loading, setLoading] = useState(true)
    const [error, setError] = useState<Error | null>(null)
    const [isAdmin, setIsAdmin] = useState(false)

    useEffect
# Supabase Integration Plan

## Current State Analysis

### Database Tables
1. **calendar_events**
   - Columns: id, title, description, date, type, created_at, user_id
   - RLS: Enabled with policies for users to manage their own events
   - Special policy for test user (rsb.3@me.com) with ID 'b9b36d04-59e0-49d7-83ff-46c5186a8cf4'

2. **events**
   - Columns: event_id, title, description, event_date, user_id, created_at
   - No explicit RLS policies found in migration files

3. **todo_list**
   - Columns: id, created_at, title, urgent, description, done, done_at, owner
   - RLS: Enabled with a policy for authenticated users to manage their own todos
   - Grants to anon, authenticated, and service_role roles

### Users
- Test user (rsb.3@me.com) with ID 'b9b36d04-59e0-49d7-83ff-46c5186a8cf4'
- Role: authenticated

### Next.js Integration
- Client-side Supabase client using createClientComponentClient
- Server-side Supabase client using createServerClient
- Admin client using service role key
- SassClient wrapper for common operations
- Authentication handled through useAuth hook and getCurrentUserId function
- Fallback to TEST_USER_ID for development

## Issues and Improvements

1. **Inconsistent RLS Policies**
   - calendar_events has detailed policies
   - todo_list has a single policy
   - events table may not have RLS enabled

2. **Security Concerns**
   - todo_list grants permissions to anon role
   - Fallback to TEST_USER_ID in auth.ts could bypass RLS in production

3. **Missing Admin Role**
   - No specific admin role or policies for the owner/super admin

## Action Plan

### 1. Ensure Persistent Connection between Local and CLI Supabase

1. **Verify Supabase CLI Installation and Configuration**
   ```bash
   supabase --version
   ```

2. **Link Local Project to Supabase**
   ```bash
   supabase link --project-ref <project-ref>
   ```

3. **Create a Script to Sync Local and Remote Databases**
   - Create a script that pulls the latest changes from the remote database
   - Schedule regular syncs to keep local and remote in sync

### 2. Implement User Roles and RLS Policies

1. **Create a New Migration for User Roles**
   - Create a new migration file in supabase/migrations/
   - Define admin and user roles
   - Assign rsb.3@me.com as admin

2. **Standardize RLS Policies Across Tables**
   - Enable RLS on all tables
   - Create consistent policies for user access
   - Create admin policies for full access

3. **Update Database Types**
   - Update database.types.ts to include all tables and their types

### 3. Detailed Implementation Plan

#### 3.1. Create Migration for User Roles and RLS

Create a new migration file: `supabase/migrations/20250226000000_user_roles_and_rls.sql`

```sql
-- Create user roles
CREATE TYPE auth_role AS ENUM ('admin', 'user');

-- Add role column to auth.users if not exists
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                  WHERE table_schema = 'auth' 
                  AND table_name = 'users' 
                  AND column_name = 'app_role') THEN
        ALTER TABLE auth.users ADD COLUMN app_role auth_role DEFAULT 'user';
    END IF;
END
$$;

-- Set the test user as admin
UPDATE auth.users 
SET app_role = 'admin'
WHERE id = 'b9b36d04-59e0-49d7-83ff-46c5186a8cf4';

-- Enable RLS on events table if not already enabled
ALTER TABLE events ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for events table
CREATE POLICY "Users can view their own events"
    ON events
    FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own events"
    ON events
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own events"
    ON events
    FOR UPDATE
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own events"
    ON events
    FOR DELETE
    USING (auth.uid() = user_id);

-- Create admin policies for events table
CREATE POLICY "Admins can view all events"
    ON events
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can insert events"
    ON events
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can update events"
    ON events
    FOR UPDATE
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can delete events"
    ON events
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

-- Update todo_list policies
DROP POLICY IF EXISTS "Owner can do everything" ON todo_list;

-- Revoke permissions from anon role
REVOKE ALL ON TABLE todo_list FROM anon;

-- Create user policies for todo_list
CREATE POLICY "Users can view their own todos"
    ON todo_list
    FOR SELECT
    USING (owner = auth.uid());

CREATE POLICY "Users can insert their own todos"
    ON todo_list
    FOR INSERT
    WITH CHECK (owner = auth.uid());

CREATE POLICY "Users can update their own todos"
    ON todo_list
    FOR UPDATE
    USING (owner = auth.uid())
    WITH CHECK (owner = auth.uid());

CREATE POLICY "Users can delete their own todos"
    ON todo_list
    FOR DELETE
    USING (owner = auth.uid());

-- Create admin policies for todo_list
CREATE POLICY "Admins can view all todos"
    ON todo_list
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can insert todos"
    ON todo_list
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can update todos"
    ON todo_list
    FOR UPDATE
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can delete todos"
    ON todo_list
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

-- Update calendar_events policies to include admin role
CREATE POLICY "Admins can view all calendar events"
    ON calendar_events
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can insert calendar events"
    ON calendar_events
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can update calendar events"
    ON calendar_events
    FOR UPDATE
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));

CREATE POLICY "Admins can delete calendar events"
    ON calendar_events
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM auth.users
        WHERE auth.users.id = auth.uid()
        AND auth.users.app_role = 'admin'
    ));
```

#### 3.2. Update Database Types

Update `nextjs/src/lib/database.types.ts` to include all tables:

```typescript
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      calendar_events: {
        Row: {
          id: string
          title: string
          description: string | null
          date: string
          type: 'meeting' | 'task' | 'reminder'
          created_at: string
          user_id: string
        }
        Insert: {
          id?: string
          title: string
          description?: string | null
          date: string
          type: 'meeting' | 'task' | 'reminder'
          created_at?: string
          user_id: string
        }
        Update: {
          id?: string
          title?: string
          description?: string | null
          date?: string
          type?: 'meeting' | 'task' | 'reminder'
          created_at?: string
          user_id?: string
        }
      }
      events: {
        Row: {
          event_id: string
          title: string | null
          description: string | null
          event_date: string
          user_id: string
          created_at: string | null
        }
        Insert: {
          event_id?: string
          title?: string | null
          description?: string | null
          event_date: string
          user_id: string
          created_at?: string | null
        }
        Update: {
          event_id?: string
          title?: string | null
          description?: string | null
          event_date?: string
          user_id?: string
          created_at?: string | null
        }
      }
      todo_list: {
        Row: {
          id: number
          created_at: string
          title: string
          urgent: boolean
          description: string | null
          done: boolean
          done_at: string | null
          owner: string
        }
        Insert: {
          id?: number
          created_at?: string
          title: string
          urgent?: boolean
          description?: string | null
          done?: boolean
          done_at?: string | null
          owner: string
        }
        Update: {
          id?: number
          created_at?: string
          title?: string
          urgent?: boolean
          description?: string | null
          done?: boolean
          done_at?: string | null
          owner?: string
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      auth_role: 'admin' | 'user'
    }
  }
}
```

#### 3.3. Update Auth Handling

Update `nextjs/src/lib/auth.ts` to include role-based access control:

```typescript
"use client"

import { createClientComponentClient } from "@supabase/auth-helpers-nextjs"
import { Database } from "@/lib/database.types"
import { useEffect, useState } from "react"
import { User } from "@supabase/supabase-js"

// Create a Supabase client for client components
export const supabase = createClientComponentClient<Database>()

// Hook to get the current authenticated user
export function useAuth() {
    const [user, setUser] = useState<User | null>(null)
    const [loading, setLoading] = useState(true)
    const [error, setError] = useState<Error | null>(null)
    const [isAdmin, setIsAdmin] = useState(false)

    useEffect(() => {
        let subscription: { unsubscribe: () => void } | null = null;

        async function getUser() {
            try {
                // Get the current session
                const { data: { session }, error: sessionError } = await supabase.auth.getSession()

                if (sessionError) {
                    throw sessionError
                }

                if (session?.user) {
                    setUser(session.user)
                    
                    // Check if user is admin
                    const { data, error } = await supabase
                        .from('auth.users')
                        .select('app_role')
                        .eq('id', session.user.id)
                        .single()
                    
                    if (!error && data) {
                        setIsAdmin(data.app_role === 'admin')
                    }
                } else {
                    setUser(null)
                    setIsAdmin(false)
                }

                // Set up a listener for auth state changes
                const { data } = await supabase.auth.onAuthStateChange(
                    async (_event, session) => {
                        setUser(session?.user ?? null)
                        
                        if (session?.user) {
                            // Check if user is admin
                            const { data, error } = await supabase
                                .from('auth.users')
                                .select('app_role')
                                .eq('id', session.user.id)
                                .single()
                            
                            if (!error && data) {
                                setIsAdmin(data.app_role === 'admin')
                            } else {
                                setIsAdmin(false)
                            }
                        } else {
                            setIsAdmin(false)
                        }
                    }
                )

                subscription = data.subscription;
            } catch (err) {
                console.error("Error getting auth user:", err)
                setError(err instanceof Error ? err : new Error("Unknown error"))
            } finally {
                setLoading(false)
            }
        }

        getUser()

        // Cleanup function
        return () => {
            if (subscription) {
                subscription.unsubscribe()
            }
        }
    }, [])

    return { user, loading, error, isAdmin }
}

// Test user ID for development - only use in development environment
export const TEST_USER_ID = process.env.NODE_ENV === 'development' 
    ? "b9b36d04-59e0-49d7-83ff-46c5186a8cf4"
    : "";

// Function to get the current user ID
export async function getCurrentUserId(): Promise<string> {
    try {
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error) {
            console.error("Error getting current user:", error)
            
            // Only use fallback in development
            if (process.env.NODE_ENV === 'development' && TEST_USER_ID) {
                console.warn("Using fallback test user ID in development")
                return TEST_USER_ID
            }
            
            throw error
        }

        if (!user) {
            // Only use fallback in development
            if (process.env.NODE_ENV === 'development' && TEST_USER_ID) {
                console.warn("Using fallback test user ID in development")
                return TEST_USER_ID
            }
            
            throw new Error("No authenticated user found")
        }

        return user.id
    } catch (err) {
        console.error("Error in getCurrentUserId:", err)
        
        // Only use fallback in development
        if (process.env.NODE_ENV === 'development' && TEST_USER_ID) {
            console.warn("Using fallback test user ID in development")
            return TEST_USER_ID
        }
        
        throw err
    }
}

// Function to check if current user is admin
export async function isCurrentUserAdmin(): Promise<boolean> {
    try {
        const userId = await getCurrentUserId()
        
        const { data, error } = await supabase
            .from('auth.users')
            .select('app_role')
            .eq('id', userId)
            .single()
        
        if (error) {
            console.error("Error checking admin status:", error)
            return false
        }
        
        return data?.app_role === 'admin'
    } catch (err) {
        console.error("Error in isCurrentUserAdmin:", err)
        return false
    }
}
```

#### 3.4. Create a Sync Script

Create a script to sync local and remote Supabase databases:

```bash
#!/bin/bash

# Supabase Sync Script
# This script syncs the local Supabase instance with the remote project

# Configuration
PROJECT_ID="sasstemplate"
PROJECT_REF="your-project-ref"

# Check if Supabase CLI is installed
if ! command -v supabase &> /dev/null; then
    echo "Supabase CLI is not installed. Please install it first."
    exit 1
fi

# Check if project is linked
if ! supabase status | grep -q "Project linked"; then
    echo "Project is not linked. Linking now..."
    supabase link --project-ref $PROJECT_REF
fi

# Pull the latest schema from remote
echo "Pulling latest schema from remote..."
supabase db pull

# Restart local Supabase to apply changes
echo "Restarting local Supabase..."
supabase stop
supabase start

echo "Sync completed successfully!"
```

Save this as `scripts/supabase-sync.sh` and make it executable:

```bash
chmod +x scripts/supabase-sync.sh
```

### 4. Implementation Steps

1. **Create the Migration File**
   - Create the migration file for user roles and RLS policies
   - Apply the migration to the local database

2. **Update Database Types**
   - Update the database.types.ts file to include all tables

3. **Update Auth Handling**
   - Update the auth.ts file to include role-based access control

4. **Create the Sync Script**
   - Create the script to sync local and remote databases
   - Test the script to ensure it works correctly

5. **Update Next.js Components**
   - Update components to use the new role-based access control
   - Hide admin-only features from regular users

### 5. Testing

1. **Test RLS Policies**
   - Test that users can only access their own data
   - Test that admins can access all data

2. **Test Sync Script**
   - Test that the sync script correctly syncs local and remote databases

3. **Test Role-Based Access Control**
   - Test that admin-only features are hidden from regular users
   - Test that admin users can access all features

## Conclusion

This plan outlines the steps needed to ensure that the local Supabase and web (CLI) Supabase are linked and in sync at all times, as well as how to set up users, RLS, policies, etc. By following this plan, we will create a secure and well-structured database with proper access controls for different user roles.
