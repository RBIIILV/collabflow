#############################
## General Guidelines
#############################
- Follow clean coding principles with modular, DRY, and well-documented code.
- Use a Git-based workflow with clear commit messages, systematic branching, and multi-environment strategies (local → staging → production).
- Keep all code and tests simple; avoid unnecessary complexity.
- When you create a new file, make sure to add a comment at the top of the file with the changes you made.
- When you update/make changes to a file, make sure to rewrite the comment at the top of the file with the changes you made. If there is no comment, then add one
- Also break down into smaller components and create a hooks directory to house all the different hooks you're using.
- React components should not exceed 300 lines. All designs should use a component approach so that they are easier to work on and fix without breaking other features

#############################
## Supabase Best Practices
#############################
- Utilize Supabase Auth for secure user authentication (email/password, OAuth, MFA).
- Implement Row Level Security (RLS) on sensitive tables to restrict data access.
- Manage schema changes with migration tools to ensure consistency.
- Optimize database performance with proper indexes, efficient queries, and caching strategies where applicable.

#############################
## Next.js Best Practices
#############################
- Use the Next.js App Router and server-side rendering (SSR) for critical pages.
- Leverage dynamic imports and code splitting (next/dynamic) to optimize performance.
- Optimize images using the Next.js Image component with responsive sizing and lazy loading.
- Utilize middleware for app-wide authentication checks and session management.
- Maintain a clear file and folder structure following Next.js routing and colocation guidelines.

#############################
## Security & Compliance
#############################
- Enforce the principle of least privilege when assigning user roles and restricting database access.
- Use HTTPS and configure CORS properly to secure client-server communications.
- Implement HTTP-only cookies with secure and SameSite attributes for session management.
- Regularly audit and update dependencies, credentials, and secrets.

#############################
## Performance & User Experience
#############################
- Prioritize SSR for fast initial loads and use static generation (SSG) or incremental static regeneration (ISR) when appropriate.
- Implement lazy loading for components and images and make use of code splitting to reduce bundle sizes.
- Provide clear UI feedback such as loading spinners, notifications, and error boundaries.

#############################
## Testing & Maintenance
#############################
- Write unit tests for individual functions, integration tests for API endpoints, and E2E tests for critical user flows.
- Keep tests simple: each test should have a clear purpose and minimal setup.
- If a test fails three consecutive times:
  - Use the `memory/retrieve` tool to check if similar errors have been encountered before.
  - If no solution is found, use `sequentialthinking/analyze` to break down the problem.
  - If still unresolved, use `perplexity/search` to look for solutions online.
- Store the error and its resolution in the memory graph using `memory/store` for future reference.
- Set up continuous monitoring with logging and error tracking tools.
- Use CI/CD pipelines to automate testing and deployments, ensuring consistency across environments.

#############################
## Diagram Documentation (Mermaid)
#############################
- Use Mermaid syntax within fenced code blocks to create clear, concise diagrams for system workflows and architectural overviews.
- Store complex or frequently used diagrams in the memory graph using `memory/store` for easy retrieval.
- When referencing a diagram, use `memory/retrieve` to fetch and display it.
- Keep Mermaid diagrams simple to ensure they aid understanding without adding unnecessary complexity.
- Example usage:
```mermaid
graph TD
    A[Start] --> B[Process]
    B --> C{Decision}
    C -- Yes --> D[Action 1]
    C -- No --> E[Action 2]

    Ensure any pages rendering Mermaid diagrams include the necessary script (e.g., via a CDN) for proper diagram generation.

#############################
MCP Server Tools Integration
#############################
Use the memory graph extensively:
Store common error patterns and their solutions.
Save optimized code snippets or design patterns.
Keep track of successful test configurations.
Use filesystem/read and filesystem/write to manage configuration files or logs.
Use perplexity/search for researching coding problems or finding documentation.
Use sequentialthinking/analyze for structured debugging or problem-solving.
Use supabase/query to interact with the database for data-driven tests or validations.
Use firecrawl/crawl to gather data from external sources if needed.
Use browser-tools/automate for automating browser-based tests or tasks.

#############################
Deployment & Continuous Integration
#############################
Automate deployments using CI/CD pipelines with secure, consistent environment variable management.
Document deployment processes and rollback strategies to ensure reliability and reproducibility.

#############################
Code Documentation & Commenting
#############################
Write clear inline comments for complex logic.
Use block comments to explain the purpose of functions or modules.
Store documentation templates or frequently used comments in the memory graph for consistency.
When writing new documentation, check the memory graph for existing templates using memory/retrieve.

#############################
Customization and Expansion
#############################
Update these rules as project requirements evolve.
Ensure that new modules or features adhere to the established Supabase, Next.js, and general coding guidelines.
Review and refine these guidelines periodically to incorporate the latest best practices.